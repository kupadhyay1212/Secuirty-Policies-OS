# ........create a new folder called Password-Policy.........
$folderName = "Password-Policy"
$targetPath = "C:\$folderName"

# this will verify if the password policy alreay exits on the basis of flage file present or Ninja global custome filed vaule is 1 then it will exists the script
if (-not (Test-Path -Path $targetPath -PathType Container)) {
    New-Item -Path $targetPath -ItemType Directory
    if (Test-Path -Path $targetPath -PathType Container) {
        Write-Host "Folder created successfully."
    } else {
        Write-Host "Failed to create folder."
    }
} else {
    Write-Host "Password policy and Folder already exists."
    Ninja-Property-Set passwordpolicyenforce 1
    exit
}

# ......define functions for parsing and setting security policies............
Function Parse-SecPol($CfgFile) {
    # ...export security policies to a configuration file and parse it....
    secedit /export /cfg "$CfgFile" | Out-Null
    $obj = New-Object psobject
    $index = 0
    $contents = Get-Content $CfgFile -Raw
    [regex]::Matches($contents, "(?<=\[)(.*)(?=\])") | ForEach-Object {
        $title = $_
        [regex]::Matches($contents, "(?<=\]).*?((?=\[)|(\Z))", [System.Text.RegularExpressions.RegexOptions]::Singleline)[$index] | ForEach-Object {
            $section = New-Object psobject
            $_.Value -split "\r\n" | Where-Object { $_.Length -gt 0 } | ForEach-Object {
                $value = [regex]::Match($_, "(?<=\=).*").Value
                $name = [regex]::Match($_, ".*(?=\=)").Value
                $section | Add-Member -MemberType NoteProperty -Name $name.Trim() -Value $value.Trim() -ErrorAction SilentlyContinue | Out-Null
            }
            $obj | Add-Member -MemberType NoteProperty -Name $title -Value $section
        }
        $index += 1
    }
    return $obj
}

Function Set-SecPol($Object, $CfgFile) {
    $Object.PSObject.Properties.GetEnumerator() | ForEach-Object {
        "[$($_.Name)]"
        $_.Value.PSObject.Properties.GetEnumerator() | ForEach-Object {
            "$($_.Name)=$($_.Value)"
        }
    } | Out-File $CfgFile -Encoding ASCII -ErrorAction Stop
    secedit /configure /db c:\windows\security\local.sdb /cfg "$CfgFile" /areas SECURITYPOLICY
}

# .......parse the existing security policies..........
$CfgFile = "C:\Password-Policy\Password-Policy.cfg"
$SecPool = Parse-SecPol -CfgFile $CfgFile

# ...modify password policy settings......
$SecPool.'System Access'.PasswordComplexity = 1
$SecPool.'System Access'.MinimumPasswordLength = 8
$SecPool.'System Access'.MinimumPasswordAge = 0
$SecPool.'System Access'.MaximumPasswordAge = 90
$SecPool.'System Access'.LockoutBadCount = 6
$SecPool.'System Access'.PasswordHistorySize = 5
$SecPool.'System Access'.LockoutDuration = 5
$SecPool.'System Access'.ResetLockoutCount = 5

# ..........apply the modified security policies...........
Set-SecPol -Object $SecPool -CfgFile $CfgFile

# ...now, force users to change their password on the next login.....
 Get-LocalUser | ForEach-Object {
    & net user $_.Name /logonpasswordchg:yes
 }
 
Ninja-Property-Set passwordpolicyenforce 1


